@typeparam TRowData

<CascadingValue IsFixed="true" Value="this">@ChildContent</CascadingValue>

<table>
    <thead>
        <tr>
            @foreach (var column in columns)
            {
                @column.HeaderTemplate
            }
        </tr>
    </thead>
    <tbody>
        @{
            if (Items is not null)
            {
                var index = 0;
                foreach (var item in Items)
                {
                    <tr @key="item.GetHashCode()" class="@(RowClass?.Invoke(item, index++))">
                        @foreach (var column in columns)
                        {
                            @column.CellTemplate(item)
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> TableAttributes { get; set; }

    [Parameter]
    public ICollection<TRowData> Items { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Func<TRowData, int, string> RowClass { get; set; }

    private readonly List<GridColumn<TRowData>> columns = new List<GridColumn<TRowData>>();

    internal void AddColumn(GridColumn<TRowData> column)
    {
        columns.Add(column);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
        //base.OnAfterRender(firstRender);
    }
}
